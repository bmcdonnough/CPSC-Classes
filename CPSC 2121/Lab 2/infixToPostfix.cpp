/*
 * Name: Benjamin McDonnough
 * Date Submitted: 09/12/23
 * Lab Section: 006
 * Assignment Name: Infix to Postfix Conversion
 */

#include <string>
#include <stack>
#include <iostream>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols
int infixToPostfix(string infix[], int length, string postfix[])
{
    //Check to see if the () are aligned
    int leftCtr = 0, rightCtr = 0, postCtr = 0;
    for(int i = 0; i < length; i++){
        if(infix[i] == "("){
            leftCtr++;
        }
        else if(infix[i] == ")"){
            rightCtr++;
        }

        if(rightCtr > leftCtr){
            return 0;
        }
    }
    //If they are not, return 0
    if(!(leftCtr == rightCtr)){
        return 0;
    }
    //If they are, start to change prefix to postfix
    else{
        stack<string> stack;
        for(int i = 0; i < length; i++){
            if(infix[i] != "(" && infix[i] != ")" &&
               infix[i] != "*" && infix[i] != "/" &&
               infix[i] != "%" && infix[i] != "+" &&
               infix[i] != "-")
            {
                postfix[postCtr] = infix[i];
                postCtr++;
            }
            else if(infix[i] == "("){
                stack.push(infix[i]);
            }
            else if(infix[i] == "*" || infix[i] == "/" || infix[i] == "%"){
                if(stack.empty()){
                    stack.push(infix[i]);
                }
                else if(stack.top() == "*" || stack.top() == "/" ||
                        stack.top() == "%")
                {
                    postfix[postCtr] = stack.top();
                    postCtr++;
                    stack.pop();
                    stack.push(infix[i]);
                }
                else{
                    stack.push(infix[i]);
                }

            }
            else if(infix[i] == "+" || infix[i] == "-"){
                if(stack.empty()){
                    stack.push(infix[i]);
                }
                else if(stack.top() != "("){
                    while(!stack.empty() && stack.top() != "("){
                        postfix[postCtr] = stack.top();
                        postCtr++;
                        stack.pop();
                    }
                    stack.push(infix[i]);
                }
                else{
                    stack.push(infix[i]);
                }
            }
            else if(infix[i] == ")"){
                if(!stack.empty()){
                    while(stack.top() != "("){
                        postfix[postCtr] = stack.top();
                        postCtr++;
                        stack.pop();
                    }
                    stack.pop();
                }
            }
        }
        if(!stack.empty()){
            while(!stack.empty()){
                postfix[postCtr] = stack.top();
                postCtr++;
                stack.pop();
            }
        }
        return postCtr;
    }
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to "2", "3", "4", "*", "+", "10", "5", "/", "3", "%", "-"
/*int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "*", "6", "+", "7", ")", "*", "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<17; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 17" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 17, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}*/